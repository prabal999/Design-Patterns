package com.prabalhub.design.patterns.creational.singleton;

/**
 * In eager initialization, the instance of Singleton Class is created at the
 * time of class loading, this is the easiest method to create a singleton class
 * but it has a drawback that instance is created even though client application
 * might not be using it.
 * 
 * @author Prabal Srivastava
 *
 */
//Enum cann't extends, by default extends java.lang.Enum
//Cann't be final, as it does not support extends.
//can implements interface.(by default Enum implements Serializable and Clonable interface)
public enum EnumEager {
	// we can create Enum without any instance also. Just put ";" then methods.
	;
	
	/**
	 * We can declare constructors inside Enum, but remember we can only 
	 * declare either private or package-private constructor inside enum. 
	 * public and protected constructors are not permitted inside enum.
	 */
	private EnumEager(String valuse, int oder) {
		// Do your stuff.
	}
	public static boolean isValid() {
		throw new UnsupportedOperationException("Not supported yet.");
	}

	/**
	 * Enum default constructor. This is the only constructor of creating enum,
	 * which is called by code, generated by compiler in response to enum type
	 * declaration. 
	 * protected Enum(String name, int ordinal) { 
	 * 	this.name = name;
	 * 	this.ordinal = ordinal; 
	 * }
	 * 
	 * We cann't create any instance outside Enum. No public constructor is provided by compiler. 
	 */

	@Override
	public String toString() {
		// default return name;
		return super.toString();
	}
	
	int value;

    public int getValue() {
        return value;
    }

    public void setValue(int value) {
        this.value = value;
    }
    //:TODO: Read on cloning, serialization and reflection on Enum.
}
